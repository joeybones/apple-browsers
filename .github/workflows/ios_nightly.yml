name: iOS - Nightly Tests

defaults:
  run:
    working-directory: iOS

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Run at 2 AM UTC

jobs:
  atb-ui-tests:
    name: ATB UI Tests
    runs-on: macos-15-xlarge
    timeout-minutes: 30

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set cache key hash
      run: |
         has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
         if [[ "$has_only_tags" == "true" ]]; then
           echo "cache_key_hash=${{ hashFiles('iOS/DuckDuckGo-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
         else
           echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
         fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v4
      with:
        path: iOS/DerivedData/SourcePackages
        key: ${{ runner.os }}-ios-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-ios-

    - name: Select Xcode
      uses: ./.github/actions/select-xcode-version

    - name: Select iOS Simulator
      id: select-simulator
      uses: ./.github/actions/select-ios-simulator
      with:
        preferred-versions: "18.6,18.4,18.2"

    - name: Boot iOS Simulator for log collection
      id: boot-simulator
      uses: ./.github/actions/ios-simulator-logs
      with:
        action: boot
        device-name: iPhone 16
        ios-version: ${{ steps.select-simulator.outputs.ios-version }}

    - name: Build and test
      run: |
        set -o pipefail && xcodebuild test \
          -scheme "iOS ATB UI Tests" \
          -destination "platform=iOS Simulator,id=${{ steps.boot-simulator.outputs.device-id }}" \
          -derivedDataPath "DerivedData" \
          -skipPackagePluginValidation \
          -skipMacroValidation \
          | tee xcodebuild.log \
          | xcbeautify --report junit --report-path . --junit-report-filename unittests.xml

    - name: Collect simulator logs
      id: collect-logs
      if: always()
      uses: ./.github/actions/ios-simulator-logs
      with:
        action: collect
        device-id: ${{ steps.boot-simulator.outputs.device-id }}

    - name: Upload logs if workflow failed
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: ATBBuildLogs
        path: |
          iOS/xcodebuild.log
          iOS/DerivedData/Logs/Test/*.xcresult
          ${{ steps.collect-logs.outputs.log-path }}
        retention-days: 7

    - name: Publish unit tests report
      uses: mikepenz/action-junit-report@v3
      with:
        report_paths: iOS/unittests.xml
        check_retries: true

  fingerprinting-ui-tests:
    name: Fingerprinting UI Tests
    runs-on: macos-15-xlarge
    timeout-minutes: 30

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Select Xcode
      uses: ./.github/actions/select-xcode-version

    - name: Select iOS Simulator
      id: select-simulator-fingerprinting
      uses: ./.github/actions/select-ios-simulator
      with:
        preferred-versions: "18.6,18.4,18.2"

    - name: Boot iOS Simulator for log collection
      id: boot-simulator-fingerprinting
      uses: ./.github/actions/ios-simulator-logs
      with:
        action: boot
        device-name: iPhone 16
        ios-version: ${{ steps.select-simulator-fingerprinting.outputs.ios-version }}

    - name: Build and test
      run: |
        set -o pipefail && xcodebuild test \
          -scheme "iOS Fingerprinting UI Tests" \
          -destination "platform=iOS Simulator,id=${{ steps.boot-simulator-fingerprinting.outputs.device-id }}" \
          -derivedDataPath "DerivedData" \
          -skipPackagePluginValidation \
          -skipMacroValidation \
          | tee xcodebuild.log \
          | xcbeautify --report junit --report-path . --junit-report-filename unittests.xml

    - name: Collect simulator logs
      id: collect-logs-fingerprinting
      if: always()
      uses: ./.github/actions/ios-simulator-logs
      with:
        action: collect
        device-id: ${{ steps.boot-simulator-fingerprinting.outputs.device-id }}

    - name: Upload logs if workflow failed
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: FingerprintingBuildLogs
        path: |
          iOS/xcodebuild.log
          iOS/DerivedData/Logs/Test/*.xcresult
          ${{ steps.collect-logs-fingerprinting.outputs.log-path }}
        retention-days: 7

    - name: Publish unit tests report
      uses: mikepenz/action-junit-report@v3
      with:
        report_paths: iOS/unittests.xml
        check_retries: true

  notify-failure:
    name: Notify on failure
    if: ${{ always() && github.ref_name == 'main' && (needs.atb-ui-tests.result == 'failure' || needs.atb-ui-tests.result == 'cancelled' || needs.fingerprinting-ui-tests.result == 'failure' || needs.fingerprinting-ui-tests.result == 'cancelled') }}
    needs: [atb-ui-tests, fingerprinting-ui-tests]
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
    - name: Create Asana task when workflow failed
      uses: duckduckgo/native-github-asana-sync@v1.1
      with:
        action: create-asana-task
        asana-pat: ${{ secrets.ASANA_ACCESS_TOKEN }}
        asana-project: ${{ vars.GH_ASANA_IOS_APP_PROJECT_ID }}
        asana-task-name: GH Workflow Failure - iOS Nightly Tests
        asana-task-description: The iOS Nightly Tests workflow has failed. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
