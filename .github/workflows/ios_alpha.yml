name: iOS - Make TestFlight Alpha Build

defaults:
  run:
    working-directory: iOS

on:
  push:
    branches: [ main ]
    paths:
      - 'SharedPackages/**'
      - 'iOS/**'
  workflow_dispatch:
    inputs:
      destination:
        description: "TestFlight Group"
        required: true
        default: "Latest Alpha Group"
        type: string

jobs:
  build-alpha:
    runs-on: macos-15
    name: Build Alpha
    timeout-minutes: 20
    
    concurrency:
      group: ios-alpha-build-${{ github.ref }}
      cancel-in-progress: true
    
    outputs:
      cache_key_hash: ${{ steps.cache-key.outputs.cache_key_hash }}
      app_version: ${{ steps.build-alpha.outputs.app_version }}
      build_version: ${{ steps.build-alpha.outputs.build_version }}
      ipa_path: ${{ steps.build-alpha.outputs.ipa_path }}
      dsyms_path: ${{ steps.build-alpha.outputs.dsyms_path }}
      should_skip: ${{ steps.check-upload.outputs.should_skip }}

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Assert main branch
      run: |
        if [ "${{ github.ref_name }}" != "main" ]; then
          echo "üëé Not the main branch"
          exit 1
        fi

    - name: Register SSH keys for access to certificates
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check for active upload job
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |        
        # Check for any in-progress upload jobs - if one is found then we can
        # skip doing this build, since the workflow will check at the end of the
        # upload whether a re-build needs to happen.

        echo " Checking for active upload jobs..."
        
        # Get all in-progress runs for this workflow
        runs=$(gh run list \
          --workflow="ios_alpha.yml" \
          --json="status,databaseId" \
          --jq='.[] | select(.status == "in_progress" or .status == "queued") | .databaseId')

        upload_in_progress=false
        for run_id in $runs; do
          # Check if this run has an upload job in progress
          upload_job="$(gh run view "$run_id" \
            --json="jobs" \
            --jq='.jobs[] | select(.name == "Upload to TestFlight" and (.status == "in_progress" or .status == "queued")) | .name' \
            2>/dev/null || echo "")"
          if [ -n "$upload_job" ]; then
            upload_in_progress=true
            echo "‚ö†Ô∏è Found active upload job in run #$run_id"
            break
          fi
        done
        
        if [ "$upload_in_progress" = true ]; then
          echo "üö´ Skipping this workflow - the rerun logic will handle this commit once upload completes."
          echo "should_skip=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ No active upload jobs found. Proceeding with build..."
          echo "should_skip=false" >> $GITHUB_OUTPUT
        fi
      id: check-upload

    - name: Set cache key hash
      if: steps.check-upload.outputs.should_skip != 'true'
      id: cache-key
      run: |
         has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
         if [[ "$has_only_tags" == "true" ]]; then
           cache_key_hash="${{ hashFiles('iOS/DuckDuckGo-iOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}"
           echo "cache_key_hash=${cache_key_hash}" >> $GITHUB_ENV
           echo "cache_key_hash=${cache_key_hash}" >> $GITHUB_OUTPUT
         else
           echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
         fi

    - name: Cache SPM
      if: env.cache_key_hash && steps.check-upload.outputs.should_skip != 'true'
      uses: actions/cache@v4
      with:
        path: iOS/DerivedData/SourcePackages
        key: ${{ runner.os }}-ios-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-ios-

    - name: Select Xcode
      if: steps.check-upload.outputs.should_skip != 'true'
      uses: ./.github/actions/select-xcode-version

    - name: Setup Ruby and dependencies
      if: steps.check-upload.outputs.should_skip != 'true'
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: iOS
        cache-key-prefix: ios-ruby

    - name: Add commit SHA to plist
      if: steps.check-upload.outputs.should_skip != 'true'
      run: |
        echo "Setting DDG_COMMIT_SHA to ${{ github.sha }}"
        plist_path="DuckDuckGo/Info.plist"
        /usr/libexec/PlistBuddy -c "Add :DDG_COMMIT_SHA string ${{ github.sha }}" "${plist_path}" \
          || /usr/libexec/PlistBuddy -c "Set :DDG_COMMIT_SHA ${{ github.sha }}" "${plist_path}"

    - name: Archive the app
      if: steps.check-upload.outputs.should_skip != 'true'
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      run: |
        app_version="$(cut -d ' ' -f 3 < Configuration/Version.xcconfig)"
        bundle exec fastlane increment_build_number_for_version version:$app_version app_identifier:"com.duckduckgo.mobile.ios.alpha"
        build_version="$(cut -d ' ' -f 3 < Configuration/BuildNumber.xcconfig)"
        bundle exec fastlane build_alpha
        
        # Export build metadata
        echo "app_version=${app_version}" >> $GITHUB_OUTPUT
        echo "build_version=${build_version}" >> $GITHUB_OUTPUT
        echo "ipa_path=${{ github.workspace }}/iOS/DuckDuckGo-Alpha.ipa" >> $GITHUB_OUTPUT
        echo "dsyms_path=${{ github.workspace }}/iOS/DuckDuckGo-Alpha.app.dSYM.zip" >> $GITHUB_OUTPUT
      id: build-alpha

    - name: Upload build artifacts
      if: steps.check-upload.outputs.should_skip != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: alpha-build-${{ steps.build-alpha.outputs.app_version }}-${{ steps.build-alpha.outputs.build_version }}
        path: |
          iOS/DuckDuckGo-Alpha.ipa
          iOS/DuckDuckGo-Alpha.app.dSYM.zip
        retention-days: 1

  upload:
    needs: build-alpha
    if: needs.build-alpha.outputs.should_skip != 'true'
    runs-on: macos-15
    name: Upload to TestFlight
    timeout-minutes: 15

    concurrency:
      group: ios-alpha-upload
      cancel-in-progress: false

    env:
      destination: ${{ github.event.inputs.destination || inputs.destination || 'Latest Alpha Group' }}

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: alpha-build-${{ needs.build-alpha.outputs.app_version }}-${{ needs.build-alpha.outputs.build_version }}
        path: iOS/

    - name: Setup Ruby and dependencies
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: iOS
        cache-key-prefix: ios-ruby

    - name: Upload app to TestFlight
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
      run: |
        bundle exec fastlane upload_alpha groups:["${{ env.destination }}"] ipa_path:"${{ needs.build-alpha.outputs.ipa_path }}"

    - name: Upload dSYMs artifact
      uses: actions/upload-artifact@v4
      with:
        name: DuckDuckGo-Alpha-dSYM-${{ needs.build-alpha.outputs.app_version }}
        path: ${{ needs.build-alpha.outputs.dsyms_path }}

    - name: Upload debug symbols to Asana
      env:
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        asana_dsyms_path="${{ github.workspace }}/iOS/DuckDuckGo-Alpha-${{ needs.build-alpha.outputs.app_version }}(${{ needs.build-alpha.outputs.build_version }})-dSYM.zip"
        mv -f "${{ needs.build-alpha.outputs.dsyms_path }}" "$asana_dsyms_path"
        curl -s "https://app.asana.com/api/1.0/tasks/1205344386326139/attachments" \
          -H "Authorization: Bearer ${{ secrets.ASANA_ACCESS_TOKEN }}" \
          --form "file=@${asana_dsyms_path};type=application/zip"

  rerun-check:
    needs: upload
    runs-on: ubuntu-latest
    name: Post-Upload Checks
    if: github.event_name == 'push'

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        fetch-depth: 10

    - name: Check for newer commits and rerun if needed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        current_commit="${{ github.sha }}"
        branch_name="main"
        
        echo "Fetching latest changes from origin/${branch_name}..."
        if ! git fetch origin "${branch_name}"; then
          echo "‚ùå Failed to fetch latest changes from origin/${branch_name}"
          exit 1
        fi
        
        latest_commit=$(git rev-parse "origin/${branch_name}")
        
        echo "Current workflow commit: $current_commit"
        echo "Latest commit on ${branch_name}: $latest_commit"
        
        if [ "$current_commit" != "$latest_commit" ]; then
          echo "Newer commit detected. Triggering new workflow run..."
          curl -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ios_alpha.yml/dispatches" \
            -d "{\"ref\":\"${branch_name}\"}"
        else
          echo "No newer commits. Workflow complete."
        fi
