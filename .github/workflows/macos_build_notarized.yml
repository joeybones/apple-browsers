name: macOS - Make Notarized DMG Release

defaults:
  run:
    working-directory: macOS

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Build type (product review or public release)"
        default: review
        type: choice
        options:
        - review
        - release
        - alpha
      create-dmg:
        description: "Create DMG image"
        default: false
        type: boolean
      asana-task-url:
        description: "Asana release task URL"
        required: false
        type: string
  workflow_call:
    inputs:
      release-type:
        description: "Build type (product review or public release)"
        default: release
        type: string
      create-dmg:
        description: "Create DMG image"
        default: true
        type: boolean
      asana-task-url:
        description: "Asana release task URL"
        required: false
        type: string
      branch:
        description: "Branch name"
        required: false
        type: string
      commit-sha:
        description: "Commit SHA"
        required: false
        type: string
      build-number-override:
        description: "Override build number (for Alpha builds)"
        required: false
        type: string
      skip-notify:
        description: "Skip Mattermost notification"
        default: false
        type: boolean
    secrets:
      APPLE_API_KEY_BASE64:
        required: true
      APPLE_API_KEY_ID:
        required: true
      APPLE_API_KEY_ISSUER:
        required: true
      ASANA_ACCESS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_ACCESS_KEY_ID_RELEASE_S3:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SECRET_ACCESS_KEY_RELEASE_S3:
        required: true
      MATCH_PASSWORD:
        required: true
      MM_WEBHOOK_URL:
        required: true
      SSH_PRIVATE_KEY_FASTLANE_MATCH:
        required: true

jobs:
  export-notarized-app:

    name: Export Notarized App

    runs-on: macos-15-xlarge

    outputs:
      app-version: ${{ steps.set-outputs.outputs.app-version }}
      app-name: ${{ steps.set-outputs.outputs.app-name }}
      upload-to: ${{ steps.is-official-release.outputs.upload-to }}
      test-build-s3-path: ${{ steps.upload-dsyms-to-s3-test-build.outputs.test-build-s3-path }}
      dsym-s3-path: ${{ steps.upload-dsyms-to-s3-test-build.outputs.dsym-s3-path }}
      dsym-url: ${{ steps.upload-dsyms-to-s3-test-build.outputs.dsym-url }}

    env:
      RUNS_ON: macos-15-xlarge # keep this in sync with runs-on above
      release-type: ${{ github.event.inputs.release-type || inputs.release-type }}
      asana-task-url: ${{ github.event.inputs.asana-task-url || inputs.asana-task-url }}
      branch: ${{ inputs.branch || github.ref_name }}

    steps:
    - name: Register SSH key for certificates repository access
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.commit-sha || env.branch }}

    - name: Start measuring duration
      id: start-duration
      uses: ./.github/actions/measure-duration
      with:
        mode: start

    - name: Setup Ruby and dependencies
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: macOS
        cache-key-prefix: macos-ruby

    - name: Sync code signing assets
      id: sync-signing-first-attempt
      continue-on-error: true
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        SSH_PRIVATE_KEY_FASTLANE_MATCH: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}
      run: |
        case "${{ env.release-type }}" in
          "release")
            bundle exec fastlane sync_signing_dmg_release
            ;;
          "review")
            bundle exec fastlane sync_signing_dmg_review
            ;;
          "alpha")
            bundle exec fastlane sync_signing_dmg_alpha
            ;;
        esac

    - name: Retry sync code signing assets
      if: steps.sync-signing-first-attempt.outcome == 'failure'
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        SSH_PRIVATE_KEY_FASTLANE_MATCH: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}
      run: |
        echo "First attempt to sync code signing assets failed. Retrying..."
        case "${{ env.release-type }}" in
          "release")
            bundle exec fastlane sync_signing_dmg_release
            ;;
          "review")
            bundle exec fastlane sync_signing_dmg_review
            ;;
          "alpha")
            bundle exec fastlane sync_signing_dmg_alpha
            ;;
        esac

    - name: Check if this is an official release build
      id: is-official-release
      env:
        is-official-release: ${{ env.release-type == 'release' && (startsWith(env.branch, 'release') || startsWith(env.branch, 'hotfix')) }}
      run: |
        echo "is-official-release=${{ env.is-official-release }}" >> $GITHUB_ENV
        if [[ "${{ env.is-official-release }}" == "true" ]] || [[ "${{ env.release-type }}" == "alpha" ]]; then
          echo "upload-to=s3" >> $GITHUB_OUTPUT
          echo "upload-to=s3" >> $GITHUB_ENV
        else
          echo "upload-to=s3testbuilds" >> $GITHUB_OUTPUT
          echo "upload-to=s3testbuilds" >> $GITHUB_ENV
        fi

    - name: Select Xcode
      uses: ./.github/actions/select-xcode-version

    - name: Override version and build number for Alpha release and add commit SHA to plist
      if: ${{ env.release-type == 'alpha' }}
      env:
        ALPHA_VERSION: 9999.9.9
      run: |
        echo "Overriding version number to ${ALPHA_VERSION}"
        echo "MARKETING_VERSION = ${ALPHA_VERSION}" > Configuration/Version.xcconfig
        if [[ "${{ inputs.build-number-override }}" != "" ]]; then
          echo "Overriding build number to ${{ inputs.build-number-override }}"
          echo "CURRENT_PROJECT_VERSION = ${{ inputs.build-number-override }}" > Configuration/BuildNumber.xcconfig
        fi
        plist_path="DuckDuckGo/Info.plist"
        /usr/libexec/PlistBuddy -c "Add :DDG_COMMIT_SHA string ${{ github.sha }}" "${plist_path}" \
          || /usr/libexec/PlistBuddy -c "Set :DDG_COMMIT_SHA ${{ github.sha }}" "${plist_path}"

    - name: Archive and notarize the app
      id: archive
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        # import API Key from secrets
        export APPLE_API_KEY_PATH="$RUNNER_TEMP/apple_api_key.pem"
        echo -n "$APPLE_API_KEY_BASE64" | base64 --decode -o $APPLE_API_KEY_PATH

        if [[ "${{ runner.debug }}" == "1" ]]; then
          ./scripts/archive.sh ${{ env.release-type }} -r
        else
          ./scripts/archive.sh ${{ env.release-type }}
        fi

    - name: Report job duration
      uses: ./.github/actions/measure-duration
      with:
        mode: stop
        start-timestamp: ${{ steps.start-duration.outputs.start-timestamp }}
        pixel-name: m_ci_apple_duration_macos_notarized_build
        pixel-params: |
          runner: ${{ env.RUNS_ON }}

    - name: Set app name and version
      id: set-outputs
      run: |
        echo "app-version=${{ env.app-version }}" >> $GITHUB_OUTPUT
        echo "app-name=${{ env.app-name }}" >> $GITHUB_OUTPUT
        app_name="${{ env.app-name }}"
        app_name="${app_name// /-}"

        # Rename dSYM to match app name
        original_dsym_name="DuckDuckGo-${{ env.app-version }}-dSYM.zip"
        dsym_name="${app_name}-${{ env.app-version }}-dSYM.zip"
        mv -f "release/${original_dsym_name}" "release/${dsym_name}"
        echo "dsym-name=${dsym_name}" >> $GITHUB_OUTPUT

    - name: Upload app artifact
      uses: actions/upload-artifact@v4
      with:
        name: DuckDuckGo-${{ env.release-type }}-${{ env.app-version }}.app.tar.xz
        path: ${{ github.workspace }}/macOS/release/DuckDuckGo-${{ env.app-version }}.app.tar.xz

    - name: Upload dSYMs artifact
      uses: actions/upload-artifact@v4
      with:
        name: DuckDuckGo-${{ env.release-type }}-dSYM-${{ env.app-version }}
        path: ${{ github.workspace }}/macOS/release/${{ steps.set-outputs.outputs.dsym-name }}

    - name: Update Sentry grouping rules
      if: ${{ env.upload-to == 's3' }}
      id: update-grouping-rules
      continue-on-error: true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        DSYM_S3_PATH: s3://${{ vars.DSYM_BUCKET_NAME }}/${{ vars.MACOS_DSYM_BUCKET_RULES_PREFIX }}/
      run: |
        bundle exec fastlane run generate_sentry_grouping_rules platform:macos output_file:grouping-rules.txt
        aws s3 cp grouping-rules.txt ${{ env.DSYM_S3_PATH }}

    - name: Upload dSYMs to S3
      if: ${{ env.upload-to == 's3' }}
      id: upload-dsyms-to-s3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        DSYM_BUCKET_NAME: ${{ vars.DSYM_BUCKET_NAME }}
        DSYM_BUCKET_PREFIX: ${{ vars.MACOS_DSYM_BUCKET_PREFIX }}
        DSYM_NAME: ${{ steps.set-outputs.outputs.dsym-name }}
        DSYM_LOCAL_PATH: "${{ github.workspace }}/macOS/release/${{ steps.set-outputs.outputs.dsym-name }}"
      run: |
        dsym_s3_path="s3://${DSYM_BUCKET_NAME}/${DSYM_BUCKET_PREFIX}/${DSYM_NAME}"
        aws s3 cp $DSYM_LOCAL_PATH $dsym_s3_path
        echo "dsym-s3-path=${dsym_s3_path}" >> $GITHUB_OUTPUT

    - name: Upload dSYMs to S3 (test build)
      if: ${{ env.upload-to == 's3testbuilds' }}
      id: upload-dsyms-to-s3-test-build
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE_S3 }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE_S3 }}
        AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        DSYM_NAME: ${{ steps.set-outputs.outputs.dsym-name }}
        DSYM_LOCAL_PATH: "${{ github.workspace }}/macOS/release/${{ steps.set-outputs.outputs.dsym-name }}"
        DSYM_URL_ROOT: ${{ vars.DMG_URL_ROOT }}
        RELEASE_BUCKET_NAME: ${{ vars.RELEASE_BUCKET_NAME }}
        RELEASE_BUCKET_PREFIX: ${{ vars.RELEASE_BUCKET_PREFIX }}
        REVIEW_BUILDS_BUCKET_PREFIX: ${{ vars.REVIEW_BUILDS_BUCKET_PREFIX }}
      run: |
        ref_sha="$(git rev-parse --short HEAD)"
        test_build_s3_path="s3://${RELEASE_BUCKET_NAME}/${RELEASE_BUCKET_PREFIX}/${REVIEW_BUILDS_BUCKET_PREFIX}/${ref_sha}/"
        dsym_s3_path="${test_build_s3_path}${DSYM_NAME}"
        echo "test-build-s3-path=${test_build_s3_path}" >> $GITHUB_OUTPUT

        # Calculate the URL for the dSYM to report it later
        s3_bucket_url="s3://${RELEASE_BUCKET_NAME}/${RELEASE_BUCKET_PREFIX}/"
        dsym_url="${dsym_s3_path/#${s3_bucket_url}/${DSYM_URL_ROOT}}" # replace S3 bucket url with CDN URL
        echo "dsym-url=${dsym_url}" >> $GITHUB_OUTPUT
        aws s3 cp $DSYM_LOCAL_PATH $dsym_s3_path --acl public-read
        echo "dsym-s3-path=${dsym_s3_path}" >> $GITHUB_OUTPUT

    - name: Report success
      if: ${{ env.upload-to == 's3' && env.asana-task-url != '' }}
      env:
        DSYM_S3_PATH: ${{ steps.upload-dsyms-to-s3.outputs.dsym-s3-path }}
        TAG: ${{ env.app-version }}
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        bundle exec fastlane run asana_log_message \
          task_url:"${{ env.asana-task-url }}" \
          template_name:"debug-symbols-uploaded" \
          github_handle:"${{ github.actor }}" \
          is_scheduled_release:"${{ github.event_name == 'schedule' }}"

  create-dmg:

    name: Create DMG
    needs: export-notarized-app
    if: ${{ github.event.inputs.create-dmg == true || inputs.create-dmg == true }}

    runs-on: macos-15

    env:
      app-version: ${{ needs.export-notarized-app.outputs.app-version }}
      app-name: ${{ needs.export-notarized-app.outputs.app-name }}
      asana-task-url: ${{ github.event.inputs.asana-task-url || inputs.asana-task-url }}
      branch: ${{ inputs.branch || github.ref_name }}
      upload-to: ${{ needs.export-notarized-app.outputs.upload-to }}
      release-type: ${{ github.event.inputs.release-type || inputs.release-type }}
      RUNS_ON: macos-15 # keep this in sync with runs-on above

    steps:

    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ inputs.commit-sha || env.branch }}
        sparse-checkout: |
          .github
          Gemfile
          Gemfile.lock
          fastlane
          macOS/Gemfile
          macOS/Gemfile.lock
          macOS/fastlane
          macOS/scripts/assets

    - name: Start measuring duration
      id: start-duration
      uses: ./.github/actions/measure-duration
      with:
        mode: start

    - name: Setup Ruby and dependencies
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: macOS
        cache-key-prefix: macos-ruby

    - name: Fetch app bundle
      uses: actions/download-artifact@v4
      with:
        name: DuckDuckGo-${{ env.release-type }}-${{ env.app-version }}.app.tar.xz
        path: ${{ github.workspace }}/macOS/dmg

    - name: Install xz
      run: brew install xz

    - name: Extract app bundle
      run: |
        tar -xf DuckDuckGo-${{ env.app-version }}.app.tar.xz
        rm -f DuckDuckGo-${{ env.app-version }}.app.tar.xz

        # Rename extracted app to match expected name for DMG creation
        extracted_app=$(find . -maxdepth 1 -name "*.app" -type d | head -1)
        if [[ -n "${extracted_app}" ]]; then
          extracted_app_name=$(basename "${extracted_app}")
          expected_app_name="${{ env.app-name }}.app"
          if [[ "${extracted_app_name}" != "${expected_app_name}" ]]; then
            echo "Renaming extracted app from '${extracted_app_name}' to '${expected_app_name}'"
            mv -f "${extracted_app}" "${expected_app_name}"
          else
            echo "Extracted app already has the correct name: ${expected_app_name}"
          fi
        else
          echo "⚠️  Warning: No .app bundle found after extraction"
        fi
      working-directory: ${{ github.workspace }}/macOS/dmg

    - name: Install create-dmg
      run: brew install create-dmg

    - name: Create DMG
      id: create-dmg
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        app_name="${{ env.app-name }}"
        app_name="${app_name// /-}" # replace spaces with hyphens
        app_name="$(echo "$app_name" | tr '[:upper:]' '[:lower:]')" # lowercase
        dmg="${app_name}-${{ env.app-version }}.dmg"
        # Using APFS filesystem as per https://github.com/actions/runner-images/issues/7522#issuecomment-2299918092
        create-dmg --volname "${{ env.app-name }}" \
            --volicon "scripts/assets/dmg-${{ env.release-type }}.icns" \
            --filesystem APFS \
            --icon "${{ env.app-name }}.app" 140 160 \
            --background "scripts/assets/dmg-background.png" \
            --window-size 600 400 \
            --icon-size 120 \
            --app-drop-link 430 160 "${dmg}" \
            "dmg"
        echo "dmg=${dmg}" >> $GITHUB_OUTPUT

    - name: Report job duration
      uses: ./.github/actions/measure-duration
      with:
        mode: stop
        start-timestamp: ${{ steps.start-duration.outputs.start-timestamp }}
        pixel-name: m_ci_apple_duration_macos_create_dmg
        pixel-params: |
          runner: ${{ env.RUNS_ON }}

    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: DuckDuckGo-${{ env.release-type }}-${{ env.app-version }}.dmg
        path: ${{ github.workspace }}/macOS/${{ steps.create-dmg.outputs.dmg }}

    - name: Upload DMG to S3
      id: upload-dmg-to-s3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_RELEASE_S3 }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_RELEASE_S3 }}
        AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        TEST_BUILD_S3_PATH: ${{ needs.export-notarized-app.outputs.test-build-s3-path }}
        DMG_LOCAL_PATH: "${{ github.workspace }}/macOS/${{ steps.create-dmg.outputs.dmg }}"
        DMG_URL_ROOT: ${{ vars.DMG_URL_ROOT }}
        RELEASE_BUCKET_NAME: ${{ vars.RELEASE_BUCKET_NAME }}
        RELEASE_BUCKET_PREFIX: ${{ vars.RELEASE_BUCKET_PREFIX }}
      run: |
        if [[ "${{ env.upload-to }}" == 's3' ]]; then
          if [[ "${{ env.release-type }}" == 'alpha' ]]; then
            RELEASE_BUCKET_PREFIX="${RELEASE_BUCKET_PREFIX}/alpha"
            echo "${DMG_URL_ROOT}alpha/${{ steps.create-dmg.outputs.dmg }}" > dmg_url.txt
          fi
          dmg_s3_path="s3://${RELEASE_BUCKET_NAME}/${RELEASE_BUCKET_PREFIX}/${{ steps.create-dmg.outputs.dmg }}"
        else
          dmg_s3_path="${TEST_BUILD_S3_PATH}${{ steps.create-dmg.outputs.dmg }}"

          # Calculate the URL for the dSYM to report it later
          s3_bucket_url="s3://${RELEASE_BUCKET_NAME}/${RELEASE_BUCKET_PREFIX}/"
          dmg_url="${dmg_s3_path/#${s3_bucket_url}/${DMG_URL_ROOT}}" # replace S3 bucket url with CDN URL
          echo "dmg-url=${dmg_url}" >> $GITHUB_OUTPUT
        fi
        aws s3 cp $DMG_LOCAL_PATH $dmg_s3_path --acl public-read
        echo "dmg-s3-path=${dmg_s3_path}" >> $GITHUB_OUTPUT

    - name: Upload DMG URL artifact
      if: ${{ env.release-type == 'alpha' }}
      uses: actions/upload-artifact@v4
      with:
        name: dmg_url
        path: ${{ github.workspace }}/macOS/dmg_url.txt

    - name: Report success
      if: ${{ env.asana-task-url != '' && env.upload-to == 's3' }}
      env:
        DMG_URL: ${{ vars.DMG_URL_ROOT }}${{ steps.create-dmg.outputs.dmg }}
        TAG: ${{ env.app-version }}
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        bundle exec fastlane run asana_log_message \
          task_url:"${{ env.asana-task-url }}" \
          template_name:"dmg-uploaded" \
          github_handle:"${{ github.actor }}" \
          is_scheduled_release:"${{ github.event_name == 'schedule' }}"

    - name: Report success (test build)
      if: ${{ env.upload-to == 's3testbuilds' }}
      env:
        DMG_URL: ${{ steps.upload-dmg-to-s3.outputs.dmg-url }}
        DMG_S3_PATH: ${{ steps.upload-dmg-to-s3.outputs.dmg-s3-path }}
        DSYM_URL: ${{ needs.export-notarized-app.outputs.dsym-url }}
        DSYM_S3_PATH: ${{ needs.export-notarized-app.outputs.dsym-s3-path }}
        WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
      run: |
        echo "## Build Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [${DMG_S3_PATH}](${DMG_URL})" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [${DSYM_S3_PATH}](${DSYM_URL})" >> $GITHUB_STEP_SUMMARY

        if [[ -n "${{ env.asana-task-url }}" ]]; then
          bundle exec fastlane run asana_add_comment \
            task_url:"${{ env.asana-task-url }}" \
            comment:"New build is available at ${DMG_URL}."
        fi

  mattermost:

    name: Send Mattermost message

    needs: [export-notarized-app, create-dmg]
    if: ${{ always() && inputs.skip-notify == false }}

    runs-on: macos-15

    env:
      branch: ${{ inputs.branch || github.ref_name }}
      success: ${{ (needs.export-notarized-app.result == 'success') && (needs.create-dmg.result == 'success' || needs.create-dmg.result == 'skipped') }}
      failure: ${{ (needs.export-notarized-app.result == 'failure') || (needs.create-dmg.result == 'failure') }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-sha || env.branch }}
          sparse-checkout: |
            .github
            Gemfile
            Gemfile.lock
            fastlane
            macOS/Gemfile
            macOS/Gemfile.lock
            macOS/fastlane

      - name: Setup Ruby and dependencies
        uses: ./.github/actions/setup-ruby
        with:
          working-directory: macOS
          cache-key-prefix: macos-ruby

      - name: Send Mattermost message
        if: ${{ env.success || env.failure }} # Don't execute when cancelled
        env:
          ASANA_TASK_URL: ${{ github.event.inputs.asana-task-url || inputs.asana-task-url }}
          GH_TOKEN: ${{ github.token }}
          RELEASE_TYPE: ${{ github.event.inputs.release-type || inputs.release-type }}
          WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          bundle exec fastlane run mattermost_send_message \
            mattermost_webhook_url:${{ secrets.MM_WEBHOOK_URL }} \
            github_handle:${{ github.actor }} \
            template_name:$([[ "${{ env.success }}" == "true" ]] && echo "notarized-build-complete" || echo "notarized-build-failed")