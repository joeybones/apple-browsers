name: macOS - Sync End-to-End tests

defaults:
  run:
    working-directory: macOS

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *' # run at 5 AM UTC

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  create-notarized-app:
    name: Build Notarized Review app
    uses: ./.github/workflows/macos_build_notarized.yml
    with:
      release-type: review
      create-dmg: false
      branch: ${{ github.sha }}
      skip-notify: true
    secrets: inherit

  sync-end-to-end-tests:
    name: Sync End-to-End Tests
    needs: create-notarized-app
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-13-xlarge, macos-14-xlarge, macos-15-xlarge]
        include:
          - xcode-version: "15.2"
            runner: macos-13-xlarge
            os-version: 13
          - xcode-version: "15.4"
            runner: macos-14-xlarge
            os-version: 14
          - xcode-version: "16.4"
            runner: macos-15-xlarge
            os-version: 15

    timeout-minutes: 60

    steps:
    - name: Register SSH key for certificates repository access
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Start measuring duration
      id: start-duration
      uses: ./.github/actions/measure-duration
      with:
        mode: start

    - name: Install screenresolution
      if: matrix.runner == 'macos-15-xlarge'
      run: brew install screenresolution

    - name: Change screen resolution
      if: matrix.runner == 'macos-15-xlarge'
      run: screenresolution set 1920x1080x32@60

    - name: Setup Ruby and dependencies
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: macOS
        cache-key-prefix: macos-ruby

    - name: Sync code signing assets
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        SSH_PRIVATE_KEY_FASTLANE_MATCH: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}
      run: |
        bundle exec fastlane sync_signing_ci

    - name: Download and unzip artifact
      uses: actions/download-artifact@v4
      with:
        path: macOS

    - name: Set cache key hash
      run: |
        has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
        if [[ "$has_only_tags" == "true" ]]; then
          echo "cache_key_hash=${{ hashFiles('macOS/DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
        else
          echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
        fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v4
      with:
        path: macOS/DerivedData/SourcePackages
        key: ${{ runner.os }}-macos-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-macos-

    - name: Select Xcode
      uses: ./.github/actions/select-xcode-version
      with:
        xcode-version: ${{ matrix.xcode-version }}

    - name: Create test account for Sync and return the recovery code
      uses: duckduckgo/sync_crypto/action@main
      id: sync-recovery-code
      with:
        debug: true

    - name: Build Sync e2e tests
      run: |
        set -o pipefail && xcodebuild build-for-testing \
          -scheme "macOS Sync End-to-End UI Tests CI" \
          -derivedDataPath DerivedData \
          -skipPackagePluginValidation \
          -skipMacroValidation \
        | tee xcodebuild.log \
        | xcbeautify

    - name: Extract and Copy app to /DerivedData
      run: |
        cd DuckDuckGo-review-*.app.tar.xz && tar -xf DuckDuckGo-*.app.tar.xz

        # Find the extracted app bundle and rename if needed
        extracted_app=$(find . -maxdepth 1 -name "*.app" -type d | head -1)
        if [[ -n "${extracted_app}" ]]; then
          extracted_app_name=$(basename "${extracted_app}")
          if [[ "${extracted_app_name}" != "DuckDuckGo Review.app" ]]; then
            echo "Renaming extracted app from '${extracted_app_name}' to 'DuckDuckGo Review.app'"
            mv "${extracted_app}" "DuckDuckGo Review.app"
          fi
        fi

        mv -f "DuckDuckGo Review.app" "../DerivedData/Build/Products/Review/DuckDuckGo Review.app"

    - name: Run UI Tests
      id: run-ui-tests
      env:
        CODE: ${{ steps.sync-recovery-code.outputs.recovery-code }}
      run: |
        # Set CODE environment variable in the scheme definition, since Xcode 15.4 doesn't
        # seem to recognize global environment variables otherwise.
        # We use xmlstarlet to edit the scheme XML file.
        brew install xmlstarlet
        xmlstarlet ed -i '/Scheme/LaunchAction/EnvironmentVariables/EnvironmentVariable[1]' -t elem -n "EnvironmentVariable" \
          -i '/Scheme/LaunchAction/EnvironmentVariables/EnvironmentVariable[1]' -t attr -n "key" -v "CODE" \
          -i '/Scheme/LaunchAction/EnvironmentVariables/EnvironmentVariable[1]' -t attr -n "value" -v "$CODE" \
          -i '/Scheme/LaunchAction/EnvironmentVariables/EnvironmentVariable[1]' -t attr -n "isEnabled" -v "YES" \
          "DuckDuckGo-macOS.xcodeproj/xcshareddata/xcschemes/macOS Sync End-to-End UI Tests CI.xcscheme" > updated.xcscheme
        mv -f updated.xcscheme "DuckDuckGo-macOS.xcodeproj/xcshareddata/xcschemes/macOS Sync End-to-End UI Tests CI.xcscheme"

        defaults write com.duckduckgo.macos.browser.review sync.environment Development
        defaults write com.duckduckgo.macos.browser.review moveToApplicationsFolderAlertSuppress 1
        set -o pipefail && xcodebuild test-without-building \
          -scheme "macOS Sync End-to-End UI Tests CI" \
          -derivedDataPath DerivedData \
          -skipPackagePluginValidation \
          -skipMacroValidation \
          -test-iterations 2 \
          -retry-tests-on-failure \
        | tee -a xcodebuild.log \
        | tee ui-tests.log

    - name: Report job duration
      if: success() || (always() && steps.run-ui-tests.outcome == 'failure')
      uses: ./.github/actions/measure-duration
      with:
        mode: stop
        start-timestamp: ${{ steps.start-duration.outputs.start-timestamp }}
        pixel-name: m_ci_apple_duration_macos_${{ matrix.os-version }}_sync_tests
        pixel-params: |
          runner: ${{ matrix.runner }}

    - name: Prepare test report
      if: always()
      run: |
        xcbeautify --report junit --report-path . --junit-report-filename ui-tests.xml < ui-tests.log

    - name: Publish tests report
      uses: mikepenz/action-junit-report@v4
      if: always() # always run even if the previous step fails
      with:
        check_name: "Test Report ${{ matrix.runner }}"
        report_paths: macOS/ui-tests.xml
        check_retries: true

    - name: Upload logs when workflow failed
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: "BuildLogs ${{ matrix.runner }}"
        path: |
          macOS/xcodebuild.log
          macOS/DerivedData/Logs/Test/*.xcresult
          ~/Library/Logs/DiagnosticReports/*
        retention-days: 7

  notify-failure:
    name: Notify on failure
    if: ${{ always() && github.event_name == 'schedule' && (needs.sync-end-to-end-tests.result == 'failure' || needs.sync-end-to-end-tests.result == 'cancelled') }}
    needs: [sync-end-to-end-tests]
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
    - name: Create Asana task when workflow failed
      uses: duckduckgo/native-github-asana-sync@v1.1
      with:
        action: create-asana-task
        asana-pat: ${{ secrets.ASANA_ACCESS_TOKEN }}
        asana-project: ${{ vars.MACOS_APP_DEVELOPMENT_ASANA_PROJECT_ID }}
        asana-task-name: GH Workflow Failure - Sync End-to-End Tests
        asana-task-description: The Sync end-to-end workflow has failed. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
