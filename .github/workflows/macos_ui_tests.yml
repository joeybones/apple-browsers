name: macOS - UI Tests

defaults:
  run:
    working-directory: macOS

on:
  workflow_dispatch:
    inputs:
      all_os_versions:
        description: "Whether to test all OS versions or only the latest"
        type: boolean
        default: true
      single_test_class:
        description: "Run only a specific UITestCase (optional, e.g. 'AutocompleteTests')"
        type: string
        required: false
  schedule:
    - cron: '0 3 * * 1-5' # 3AM UTC offsetted to legacy to avoid action-junit-report@v4 bug
  push:
    branches: [ main, "release/macos/**", "hotfix/macos/**" ]
    paths:
      - 'BrowserServicesKit/**'
      - 'macOS/**'
  pull_request:
    paths:
      - '.github/**'
      - '.xcode-version'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-notarized-app:
    name: Build Notarized Review app
    uses: ./.github/workflows/macos_build_notarized.yml
    with:
      release-type: review
      create-dmg: false
      branch: ${{ github.sha }}
      skip-notify: true
    secrets: inherit

  # This job sets up the matrix strategy arguments for the ui-tests job
  setup-tests:
    name: Set up tests list
    runs-on: macos-15
    outputs:
      runner: ${{ steps.define-runners.outputs.runner }}
      include: ${{ steps.define-runners.outputs.include }}
      test: ${{ steps.list-tests.outputs.test }}
      all-os-versions: ${{ steps.define-runners.outputs.all-os-versions }}
      start-timestamp: ${{ steps.start-duration.outputs.start-timestamp }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Start measuring duration
        id: start-duration
        uses: ./.github/actions/measure-duration
        with:
          mode: start

      - name: Define runners
        id: define-runners
        run: |
          # scheduled runs don't have inputs so let's default to true for all_os_versions
          all_os_versions="${{ inputs.all_os_versions || 'true' }}"
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" || "$all_os_versions" == "false" ]]; then
            all_os_versions='false'
            runner='["macos-15-xlarge"]'
            include='[{"runner": "macos-15-xlarge", "os-version": "15", "xcode-version": "16.4"}]'
          else
            all_os_versions='true'
            runner='["macos-13-xlarge", "macos-14-xlarge", "macos-15-xlarge"]'
            include=$(jq -c <<< '[
              {"runner": "macos-13-xlarge", "os-version": "13", "xcode-version": "15.2"},
              {"runner": "macos-14-xlarge", "os-version": "14", "xcode-version": "15.4"},
              {"runner": "macos-15-xlarge", "os-version": "15", "xcode-version": "16.4"}
            ]')
          fi
          echo "all-os-versions=${all_os_versions}" >> $GITHUB_OUTPUT
          echo "runner=${runner}" >> $GITHUB_OUTPUT
          echo "include=${include}" >> $GITHUB_OUTPUT

      - name: List tests
        id: list-tests
        run: |
          # Check if a single test class was specified
          single_test_class="${{ inputs.single_test_class }}"

          if [[ -n "$single_test_class" ]]; then
            echo "Running single test class: $single_test_class"
            test=$(jq -nc --arg class "$single_test_class" '[$class]')
          else
            # Find all test files in the UITests directory
            # This assumes that all test files are named *Tests.swift and are put directly in the UITests directory
            test_names="$(find UITests -type f -maxdepth 1 -name *Tests.swift | xargs basename | sed 's/\.swift//')"
            test=$(echo $test_names | jq -cR 'split(" ")')
          fi

          echo "test=${test}" >> $GITHUB_OUTPUT

  ui-tests:
    name: ${{ matrix.test }} (macOS ${{ matrix.os-version }})
    needs: [create-notarized-app, setup-tests]
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: ${{ fromJSON(needs.setup-tests.outputs.runner) }}
        test: ${{ fromJSON(needs.setup-tests.outputs.test) }}
        include: ${{ fromJSON(needs.setup-tests.outputs.include) }}

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.runner }}-${{ matrix.test }}
      cancel-in-progress: true

    timeout-minutes: 120

    steps:
    - name: Register SSH key for certificates repository access
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install screenresolution
      if: matrix.runner == 'macos-15-xlarge'
      run: brew install screenresolution

    - name: Change screen resolution
      if: matrix.runner == 'macos-15-xlarge'
      run: screenresolution set 1920x1080x32@60

    - name: Setup Ruby and dependencies
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: macOS
        cache-key-prefix: macos-ruby

    - name: Create Default Keychain
      run: bundle exec fastlane create_keychain_ui_tests

    - name: Sync code signing assets
      id: sync-signing-first-attempt
      continue-on-error: true
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        SSH_PRIVATE_KEY_FASTLANE_MATCH: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}
      run: |
        bundle exec fastlane sync_signing_ci

    - name: Retry sync code signing assets
      if: steps.sync-signing-first-attempt.outcome == 'failure'
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        SSH_PRIVATE_KEY_FASTLANE_MATCH: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}
      run: |
        echo "First attempt to sync code signing assets failed. Retrying..."
        bundle exec fastlane sync_signing_ci

    - name: Download and unzip artifact
      uses: actions/download-artifact@v4
      with:
        path: macOS

    - name: Set cache key hash
      run: |
        has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
        if [[ "$has_only_tags" == "true" ]]; then
          echo "cache_key_hash=${{ hashFiles('macOS/DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
        else
          echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
        fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v4
      with:
        path: macOS/DerivedData/SourcePackages
        key: ${{ runner.os }}-macos-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-macos-

    - name: Select Xcode
      uses: ./.github/actions/select-xcode-version
      with:
        xcode-version: ${{ matrix.xcode-version }}

    - name: Build for testing
      run: |
        set -o pipefail && xcodebuild build-for-testing \
          -scheme "macOS UI Tests CI" \
          -derivedDataPath DerivedData \
          -skipPackagePluginValidation \
          -skipMacroValidation \
        | tee xcodebuild.log \
        | xcbeautify

    - name: Extract and Copy app to /DerivedData
      run: |
        cd DuckDuckGo-review-*.app.tar.xz && tar -xf DuckDuckGo-*.app.tar.xz

        # Find the extracted app bundle and rename if needed
        extracted_app=$(find . -maxdepth 1 -name "*.app" -type d | head -1)
        if [[ -n "${extracted_app}" ]]; then
          extracted_app_name=$(basename "${extracted_app}")
          if [[ "${extracted_app_name}" != "DuckDuckGo Review.app" ]]; then
            echo "Renaming extracted app from '${extracted_app_name}' to 'DuckDuckGo Review.app'"
            mv "${extracted_app}" "DuckDuckGo Review.app"
          fi
        fi

        mv -f "DuckDuckGo Review.app" "../DerivedData/Build/Products/Review/DuckDuckGo Review.app"

    - name: Run UI Tests
      run: |
        defaults write com.duckduckgo.macos.browser.review moveToApplicationsFolderAlertSuppress 1
        set -o pipefail && xcodebuild test-without-building \
          -scheme "macOS UI Tests CI" \
          -derivedDataPath DerivedData \
          -skipPackagePluginValidation \
          -skipMacroValidation \
          -test-iterations 2 \
          -retry-tests-on-failure \
          '-only-testing:UI Tests/${{ matrix.test }}' \
        | tee -a xcodebuild.log \
        | tee ui-tests.log

    - name: Prepare test report
      id: prepare-test-report
      if: always()
      run: |
        test_id="${{ matrix.test }} (macOS ${{ matrix.os-version }})"
        file="${test_id}.xml"
        echo "file=$file" >> $GITHUB_OUTPUT
        xcbeautify --report junit --report-path . --junit-report-filename "$file" < ui-tests.log
        # Replace the default test suite name with the test id for better grouping in the test report
        sed -i '' "s/Selected tests/${test_id}/" "$file"

    # Upload test report as artifact for the test-report job
    # that publishes a combined report for all test cases
    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "testreport-${{ matrix.test }}-macos${{ matrix.os-version }}"
        path: "macOS/${{ steps.prepare-test-report.outputs.file }}"
        retention-days: 1

    - name: Organize logs for upload
      if: failure() || cancelled()
      run: |
        echo "Current working directory: $(pwd)"

        # Create staging directory with timestamp, OS version and failing test name
        timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
        archive_name="BuildLogs ${{ matrix.test }} (macOS ${{ matrix.os-version }}) ${timestamp}"
        echo "Creating archive directory: $archive_name"
        mkdir -p "$archive_name"

        # locate and copy all files, flattening the structure with verbose output
        cp "xcodebuild.log" "$archive_name/" || echo "No xcodebuild.log found"
        find DerivedData/Logs/Test -name "*.xcresult" -print -exec cp -rf {} "$archive_name/" \; 2>&1 || echo "No .xcresult files found"
        cp -rf ~/Library/Logs/DiagnosticReports "$archive_name/"

        # Store archive name for upload step
        echo "ARCHIVE_NAME=$archive_name" >> $GITHUB_ENV

    - name: Upload logs when workflow failed
      uses: actions/upload-artifact@v4
      if: failure() || cancelled()
      with:
        name: "${{ env.ARCHIVE_NAME }}"
        path: "macOS/${{ env.ARCHIVE_NAME }}"
        retention-days: 7

  test-report:
    name: Report test results
    if: always()
    needs: [setup-tests, ui-tests]
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Download test reports
      uses: actions/download-artifact@v4
      if: always()
      with:
        pattern: "testreport-*"
        merge-multiple: true

    - name: Publish tests report
      uses: mikepenz/action-junit-report@v5
      if: always()
      with:
        check_name: Tests Report
        report_paths: "*.xml"
        check_retries: true
        group_reports: false
        flaky_summary: true
        verbose_summary: false
        include_time_in_summary: true
        skip_annotations: true

    - name: Report workflow duration
      uses: ./.github/actions/measure-duration
      with:
        mode: stop
        start-timestamp: ${{ needs.setup-tests.outputs.start-timestamp }}
        pixel-name: ${{ (needs.setup-tests.outputs.all-os-versions == true) && 'm_ci_apple_duration_macos_ui_tests_all' || 'm_ci_apple_duration_macos_ui_tests_latest' }}

  notify-failure:
    name: Notify on failure
    if: ${{ always() && github.event_name == 'schedule' && (needs.ui-tests.result == 'failure' || needs.ui-tests.result == 'cancelled') }}
    needs: [ui-tests]
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4
    - name: Create Asana task when workflow failed
      uses: duckduckgo/native-github-asana-sync@v1.1
      with:
        action: create-asana-task
        asana-pat: ${{ secrets.ASANA_ACCESS_TOKEN }}
        asana-project: ${{ vars.MACOS_APP_DEVELOPMENT_ASANA_PROJECT_ID }}
        asana-task-name: GH Workflow Failure - UI Tests
        asana-task-description: The UI Tests workflow has failed. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
