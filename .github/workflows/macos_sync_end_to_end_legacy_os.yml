name: macOS - Sync-End-to-End tests MacOS11/12

defaults:
  run:
    working-directory: macOS

on:
  workflow_dispatch:
  # Disabled due to the macos-11 and macos-12 runners being deprecated
  # schedule:
  #   - cron: '0 4 * * *' # run at 4 AM UTC

jobs:
  create-notarized-app:
    name: Prepare DMG Release
    uses: ./.github/workflows/macos_build_notarized.yml
    with:
      release-type: review
      create-dmg: false
      branch: ${{ github.ref_name }}
    secrets: inherit

  sync-end-to-end-tests-older-macos:
    name: Sync E2E tests
    needs: create-notarized-app
    env:
      app-version: ${{ needs.create-notarized-app.outputs.app-version }}

    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ macos-11, macos-12-large ]

    timeout-minutes: 60
    steps:
    - name: Register SSH key for certificates repository access
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}

    - name: Check out the code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Ruby and dependencies
      uses: ./.github/actions/setup-ruby
      with:
        working-directory: macOS
        cache-key-prefix: macos-ruby

    - name: Sync code signing assets
      env:
        APPLE_API_KEY_BASE64: ${{ secrets.APPLE_API_KEY_BASE64 }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_KEY_ISSUER: ${{ secrets.APPLE_API_KEY_ISSUER }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        SSH_PRIVATE_KEY_FASTLANE_MATCH: ${{ secrets.SSH_PRIVATE_KEY_FASTLANE_MATCH }}
      run: |
        bundle exec fastlane sync_signing_dmg_review
        bundle exec fastlane sync_signing_ci

    - name: Download and unzip artifact
      uses: actions/download-artifact@v4

    - name: Set cache key hash
      run: |
        has_only_tags=$(jq '[ .pins[].state | has("version") ] | all' DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved)
        if [[ "$has_only_tags" == "true" ]]; then
          echo "cache_key_hash=${{ hashFiles('macOS/DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}" >> $GITHUB_ENV
        else
          echo "Package.resolved contains dependencies specified by branch or commit, skipping cache."
        fi

    - name: Cache SPM
      if: env.cache_key_hash
      uses: actions/cache@v4
      with:
        path: macOS/DerivedData/SourcePackages
        key: ${{ runner.os }}-macos-${{ env.cache_key_hash }}
        restore-keys: |
          ${{ runner.os }}-macos-

    - name: Select Xcode 14.2 for macOS 12
      if: matrix.runner == 'macos-12-large'
      run: sudo xcode-select -s /Applications/Xcode_14.2.app/Contents/Developer

    - name: Select Xcode 13.2.1 for macOS 11
      if: matrix.runner == 'macos-11'
      run: sudo xcode-select -s /Applications/Xcode_13.2.1.app/Contents/Developer

    - name: Create test account for Sync and return the recovery code
      uses: duckduckgo/sync_crypto/action@main
      id: sync-recovery-code
      with:
        debug: true

    # This first bit is a hack to stop the app building package dependencies that isn't needed by the test runner
    - name: Build test runner
      run: |
        rm -rf LocalPackages
        rm -rf DuckDuckGo-macOS.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
        sed -i '' '/\/\* Begin XCSwiftPackageProductDependency section \*\//,/\/\* End XCSwiftPackageProductDependency section \*\//d' DuckDuckGo-macOS.xcodeproj/project.pbxproj
        sed -i '' '/\/\* Begin XCRemoteSwiftPackageReference section \*\//,/\/\* End XCRemoteSwiftPackageReference section \*\//d' DuckDuckGo-macOS.xcodeproj/project.pbxproj
        set -o pipefail && xcodebuild build-for-testing \
          -scheme "macOS Sync End-to-End UI Tests Old Versions" \
          -derivedDataPath DerivedData \
          -configuration Review

    - name: Extract and Copy app to /DerivedData
      run: |
        cd DuckDuckGo-review-*.app.tar.xz && tar -xf DuckDuckGo-*.app.tar.xz

        # Find the extracted app bundle and rename if needed
        extracted_app=$(find . -maxdepth 1 -name "*.app" -type d | head -1)
        if [[ -n "${extracted_app}" ]]; then
          extracted_app_name=$(basename "${extracted_app}")
          if [[ "${extracted_app_name}" != "DuckDuckGo Review.app" ]]; then
            echo "Renaming extracted app from '${extracted_app_name}' to 'DuckDuckGo Review.app'"
            mv "${extracted_app}" "DuckDuckGo Review.app"
          fi
        fi

        cp -R "DuckDuckGo Review.app" "../DerivedData/Build/Products/Review/DuckDuckGo Review.app"

    - name: Run tests
      env:
        CODE: ${{ steps.sync-recovery-code.outputs.recovery-code }}
      run: |
        defaults write com.duckduckgo.macos.browser.review moveToApplicationsFolderAlertSuppress 1
        defaults write com.duckduckgo.macos.browser.review sync.environment Development
        defaults write com.duckduckgo.macos.browser.review onboarding.finished -bool true
        set -o pipefail && xcodebuild test \
          -scheme "macOS Sync End-to-End UI Tests Old Versions" \
          -derivedDataPath DerivedData \
          -configuration Review \
          -test-iterations 2 \
          -retry-tests-on-failure \
        | tee xcodebuild.log \
        | (if [ "${{ matrix.runner }}" = "macos-11" ]; then
            xcpretty --report junit --output ui-tests.xml
          else
            xcbeautify --report junit --report-path . --junit-report-filename ui-tests.xml
          fi)

 #   - name: Create Asana task when workflow failed
 #     if: ${{ failure() }} && github.ref == 'refs/heads/main'
 #     run: |
 #       curl -s "https://app.asana.com/api/1.0/tasks" \
 #          --header "Accept: application/json" \
 #          --header "Authorization: Bearer ${{ secrets.ASANA_ACCESS_TOKEN }}" \
 #          --header "Content-Type: application/json" \
 #          --data ' { "data": { "name": "GH Workflow Failure - Sync End to end tests", "projects": [ "${{ vars.MACOS_APP_DEVELOPMENT_ASANA_PROJECT_ID }}" ], "notes" : "The end to end workflow has failed. See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" } }'

    - name: Publish tests report
      uses: mikepenz/action-junit-report@v4
      if: always()
      with:
        check_name: "Test Report ${{ matrix.runner }}"
        report_paths: macOS/ui-tests.xml

    - name: Upload logs when workflow failed
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "BuildLogs ${{ matrix.runner }}"
        path: |
          macOS/xcodebuild.log
          macOS/DerivedData/Logs/Test/*.xcresult
          ~/Library/Logs/DiagnosticReports/*
        retention-days: 7
